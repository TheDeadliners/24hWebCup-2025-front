{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/tepicharme/Developer/NextJS/webcup-2025-front/libs/schemas/login.ts"],"sourcesContent":["import {z} from \"zod\";\n\nexport type LoginData = z.infer<typeof LoginSchema>;\n\nexport const LoginSchema = z.object({\n    email: z.string({message: \"Une adresse e-mail est requise.\"}).nonempty({message: \"Une adresse est requise.\"}).trim(),\n    password: z.string({message: \"Un mot de passe est requis.\"}).nonempty({message: \"Un mot de passe est requis.\"}).trim(),\n})"],"names":[],"mappings":";;;AAAA;;AAIO,MAAM,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,SAAS;IAAiC,GAAG,QAAQ,CAAC;QAAC,SAAS;IAA0B,GAAG,IAAI;IAClH,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,SAAS;IAA6B,GAAG,QAAQ,CAAC;QAAC,SAAS;IAA6B,GAAG,IAAI;AACxH","debugId":null}},
    {"offset": {"line": 33, "column": 0}, "map": {"version":3,"sources":["file:///Users/tepicharme/Developer/NextJS/webcup-2025-front/libs/actions/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport {LoginData} from \"@/libs/schemas/login\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {createSession, destroySession, getAuthenticationToken, JwtTokenData} from \"@/libs/actions/session\";\nimport {decodeJwt} from \"jose\";\nimport {AccountData} from \"@/libs/schemas/account\";\nimport {PasswordData} from \"@/libs/schemas/password\";\nimport {RegisterData} from \"@/libs/schemas/register\";\nimport {ForgotData} from \"@/libs/schemas/forgot\";\nimport {ResetData} from \"@/libs/schemas/reset\";\n\nconst BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;\n\nexport type AuthenticationResponse = {\n    code: string,\n    message: string\n}\n\nexport async function login(loginData: LoginData): Promise<AuthenticationResponse> {\n    try {\n        const loginResponse =  await axios.post(`${BASE_URL}/login`, loginData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (loginResponse.status === 200) {\n            await createSession(loginResponse.data.token);\n            return {\n                code: \"LOGIN_SUCCEED\",\n                message: \"Connexion établie !\"\n            }\n        } else {\n            return {\n                code: \"LOGIN_FAILED\",\n                message: loginResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"LOGIN_FAILED\",\n                message: \"Identifiants invalides.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"LOGIN_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"LOGIN_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function forgot(forgotData: ForgotData): Promise<AuthenticationResponse> {\n    try {\n        const forgotResponse =  await axios.post(`${BASE_URL}/forgot-password`, forgotData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (forgotResponse.status === 200) {\n            return {\n                code: \"FORGOT_SUCCEED\",\n                message: forgotResponse.data.message\n            }\n        } else {\n            return {\n                code: \"FORGOT_FAILED\",\n                message: forgotResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"FORGOT_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"FORGOT_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function register(registerData: RegisterData): Promise<AuthenticationResponse> {\n    try {\n        const registerResponse =  await axios.post(`${BASE_URL}/register`, registerData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (registerResponse.status === 200) {\n            return {\n                code: \"REGISTER_SUCCEED\",\n                message: registerResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REGISTER_FAILED\",\n                message: registerResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REGISTER_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REGISTER_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function reset(resetData: ResetData): Promise<AuthenticationResponse> {\n    try {\n        const registerResponse =  await axios.post(`${BASE_URL}/reset-password`, resetData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (registerResponse.status === 200) {\n            return {\n                code: \"RESET_SUCCEED\",\n                message: registerResponse.data.message\n            }\n        } else {\n            return {\n                code: \"RESET_FAILED\",\n                message: registerResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"RESET_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"RESET_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function refresh(): Promise<AuthenticationResponse> {\n    try {\n        const refreshResponse =  await axios.get(`${BASE_URL}/refresh`, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (refreshResponse.status === 200) {\n            await createSession(refreshResponse.data.token);\n            const tokenData: JwtTokenData = decodeJwt(refreshResponse.data.token)\n            return {\n                code: \"REFRESH_SUCCEED\",\n                message: `Session actualisée pour ${tokenData.username} !`\n            }\n        } else {\n            return {\n                code: \"REFRESH_FAILED\",\n                message: refreshResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REFRESH_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REFRESH_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REFRESH_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function logout(): Promise<void> {\n    await destroySession();\n}\n\nexport async function check(): Promise<boolean> {\n    const authSession = await getAuthenticationToken();\n    return authSession !== undefined;\n}\n\nexport async function password(passwordData: PasswordData): Promise<AuthenticationResponse> {\n    try {\n        const passwordResponse =  await axios.post(`${BASE_URL}/change-password`, passwordData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (passwordResponse.status === 200) {\n            return {\n                code: \"REQUEST_SUCCEED\",\n                message: passwordResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: passwordResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function account(accountData: AccountData): Promise<AuthenticationResponse> {\n    try {\n        const accountResponse =  await axios.post(`${BASE_URL}/edit-account`, accountData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (accountResponse.status === 200) {\n            return {\n                code: \"REQUEST_SUCCEED\",\n                message: accountResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: accountResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}"],"names":[],"mappings":";;;;;;IAmBsB,QAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/tepicharme/Developer/NextJS/webcup-2025-front/components/controls/SessionExpiredNotice.tsx"],"sourcesContent":["'use client';\nimport { useSearchParams } from 'next/navigation';\n\nexport default function SessionExpiredNotice() {\n    const params = useSearchParams();\n    const reason = params.get('redirect');\n\n    if (reason === 'not-logged-in') {\n        return (\n            <div className=\"fieldset mt-2 p-5\">\n                <div className=\"alert alert-error\">\n                    Votre session a expiré.\n                </div>\n            </div>\n        );\n    }\n\n    return null;\n}"],"names":[],"mappings":";;;;AACA;;;AADA;;AAGe,SAAS;;IACpB,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,kBAAe,AAAD;IAC7B,MAAM,SAAS,OAAO,GAAG,CAAC;IAE1B,IAAI,WAAW,iBAAiB;QAC5B,qBACI,6LAAC;YAAI,WAAU;sBACX,cAAA,6LAAC;gBAAI,WAAU;0BAAoB;;;;;;;;;;;IAK/C;IAEA,OAAO;AACX;GAfwB;;QACL,qIAAA,CAAA,kBAAe;;;KADV","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/tepicharme/Developer/NextJS/webcup-2025-front/components/forms/login-form.tsx"],"sourcesContent":["\"use client\";\n\nimport React, {Suspense, useState} from \"react\";\nimport {LoginData, LoginSchema} from \"@/libs/schemas/login\";\nimport {Controller, useForm} from \"react-hook-form\";\nimport {zodResolver} from \"@hookform/resolvers/zod\";\nimport {EyeIcon, EyeSlashIcon, SpinnerIcon, WarningIcon} from \"@phosphor-icons/react\";\nimport {login} from \"@/libs/actions/authentication\";\nimport {redirect} from \"next/navigation\";\nimport toast from \"react-hot-toast\";\nimport SessionExpiredNotice from \"@/components/controls/SessionExpiredNotice\";\n\nexport default function LoginForm() {\n    const [isPasswordClearText, setPasswordClearText] = useState<boolean>(false);\n    const [submitState, setSubmitState] = useState<boolean>(true);\n\n    const toggleClearPassword = () => {\n        setPasswordClearText(!isPasswordClearText);\n    }\n\n    const loginForm = useForm<LoginData>({\n        resolver: zodResolver(LoginSchema),\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n        }\n    });\n\n    const onSubmit = async (loginData: LoginData): Promise<void> => {\n        setSubmitState(false);\n        const response = await login(loginData);\n        if (response.code == \"LOGIN_SUCCEED\") {\n            toast.success(response.message);\n            redirect(\"/dashboard\");\n        } else {\n            toast.error(response.message);\n        }\n        setSubmitState(true);\n    }\n\n    return (\n        <form onSubmit={loginForm.handleSubmit(onSubmit)} className=\"card\">\n            <section className=\"card-body items-center\">\n                <h2 className=\"card-title\">Connexion</h2>\n                <div className=\"w-full\">\n                    <Controller control={loginForm.control} name=\"email\" render={({field}) => (\n                        <fieldset className=\"fieldset mb-2\">\n                            <legend className=\"fieldset-legend\">Identifiant</legend>\n                            <input type=\"text\" className=\"input\" {...field}/>\n                            {loginForm.formState.errors.email && (\n                                <div role=\"alert\" className=\"form-error\">\n                                    <WarningIcon className=\"icon\"/>\n                                    <div>{loginForm.formState.errors.email.message}</div>\n                                </div>\n                            )}\n                        </fieldset>\n                    )}/>\n                    <Controller control={loginForm.control} name=\"password\" render={({field}) => (\n                        <fieldset className=\"fieldset mb-2\">\n                            <legend className=\"fieldset-legend\">Mot de passe</legend>\n                            <div className=\"flex gap-2\">\n                                <input type={isPasswordClearText ? \"text\" : \"password\"}\n                                       className=\"input\" {...field}/>\n                                <button className=\"btn btn-primary\" type=\"button\" onClick={toggleClearPassword}>\n                                    {isPasswordClearText ? <EyeIcon className=\"icon\"/> : <EyeSlashIcon className=\"icon\"/>}\n                                </button>\n                            </div>\n                            {loginForm.formState.errors.password && (\n                                <div role=\"alert\" className=\"form-error\">\n                                    <WarningIcon className=\"icon\"/>\n                                    <div>{loginForm.formState.errors.password.message}</div>\n                                </div>\n                            )}\n                        </fieldset>\n                    )}/>\n                </div>\n                <div className=\"card-actions justify-end\">\n                    <fieldset className=\"fieldset\">\n                        <div className=\"mx-auto\">\n                            <button className=\"btn btn-primary\" type={submitState ? \"submit\" : \"button\"} disabled={!submitState}>\n                                {submitState ? \"Connexion\" : <><SpinnerIcon weight=\"bold\" className=\"icon animate-spin\"/></>}\n                            </button>\n                        </div>\n                    </fieldset>\n                </div>\n            </section>\n\n            <Suspense fallback={null}>\n                <SessionExpiredNotice />\n            </Suspense>\n        </form>\n    );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;AAVA;;;;;;;;;;AAYe,SAAS;;IACpB,MAAM,CAAC,qBAAqB,qBAAqB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IACtE,MAAM,CAAC,aAAa,eAAe,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAW;IAExD,MAAM,sBAAsB;QACxB,qBAAqB,CAAC;IAC1B;IAEA,MAAM,YAAY,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAa;QACjC,UAAU,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE,2HAAA,CAAA,cAAW;QACjC,eAAe;YACX,OAAO;YACP,UAAU;QACd;IACJ;IAEA,MAAM,WAAW,OAAO;QACpB,eAAe;QACf,MAAM,WAAW,MAAM,CAAA,GAAA,0JAAA,CAAA,QAAK,AAAD,EAAE;QAC7B,IAAI,SAAS,IAAI,IAAI,iBAAiB;YAClC,0JAAA,CAAA,UAAK,CAAC,OAAO,CAAC,SAAS,OAAO;YAC9B,CAAA,GAAA,qIAAA,CAAA,WAAQ,AAAD,EAAE;QACb,OAAO;YACH,0JAAA,CAAA,UAAK,CAAC,KAAK,CAAC,SAAS,OAAO;QAChC;QACA,eAAe;IACnB;IAEA,qBACI,6LAAC;QAAK,UAAU,UAAU,YAAY,CAAC;QAAW,WAAU;;0BACxD,6LAAC;gBAAQ,WAAU;;kCACf,6LAAC;wBAAG,WAAU;kCAAa;;;;;;kCAC3B,6LAAC;wBAAI,WAAU;;0CACX,6LAAC,iKAAA,CAAA,aAAU;gCAAC,SAAS,UAAU,OAAO;gCAAE,MAAK;gCAAQ,QAAQ,CAAC,EAAC,KAAK,EAAC,iBACjE,6LAAC;wCAAS,WAAU;;0DAChB,6LAAC;gDAAO,WAAU;0DAAkB;;;;;;0DACpC,6LAAC;gDAAM,MAAK;gDAAO,WAAU;gDAAS,GAAG,KAAK;;;;;;4CAC7C,UAAU,SAAS,CAAC,MAAM,CAAC,KAAK,kBAC7B,6LAAC;gDAAI,MAAK;gDAAQ,WAAU;;kEACxB,6LAAC,+KAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;kEACvB,6LAAC;kEAAK,UAAU,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO;;;;;;;;;;;;;;;;;;;;;;;0CAK9D,6LAAC,iKAAA,CAAA,aAAU;gCAAC,SAAS,UAAU,OAAO;gCAAE,MAAK;gCAAW,QAAQ,CAAC,EAAC,KAAK,EAAC,iBACpE,6LAAC;wCAAS,WAAU;;0DAChB,6LAAC;gDAAO,WAAU;0DAAkB;;;;;;0DACpC,6LAAC;gDAAI,WAAU;;kEACX,6LAAC;wDAAM,MAAM,sBAAsB,SAAS;wDACrC,WAAU;wDAAS,GAAG,KAAK;;;;;;kEAClC,6LAAC;wDAAO,WAAU;wDAAkB,MAAK;wDAAS,SAAS;kEACtD,oCAAsB,6LAAC,2KAAA,CAAA,UAAO;4DAAC,WAAU;;;;;mFAAW,6LAAC,gLAAA,CAAA,eAAY;4DAAC,WAAU;;;;;;;;;;;;;;;;;4CAGpF,UAAU,SAAS,CAAC,MAAM,CAAC,QAAQ,kBAChC,6LAAC;gDAAI,MAAK;gDAAQ,WAAU;;kEACxB,6LAAC,+KAAA,CAAA,cAAW;wDAAC,WAAU;;;;;;kEACvB,6LAAC;kEAAK,UAAU,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAMrE,6LAAC;wBAAI,WAAU;kCACX,cAAA,6LAAC;4BAAS,WAAU;sCAChB,cAAA,6LAAC;gCAAI,WAAU;0CACX,cAAA,6LAAC;oCAAO,WAAU;oCAAkB,MAAM,cAAc,WAAW;oCAAU,UAAU,CAAC;8CACnF,cAAc,4BAAc;kDAAE,cAAA,6LAAC,+KAAA,CAAA,cAAW;4CAAC,QAAO;4CAAO,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOxF,6LAAC,6JAAA,CAAA,WAAQ;gBAAC,UAAU;0BAChB,cAAA,6LAAC,kJAAA,CAAA,UAAoB;;;;;;;;;;;;;;;;AAIrC;GAhFwB;;QAQF,iKAAA,CAAA,UAAO;;;KARL","debugId":null}}]
}