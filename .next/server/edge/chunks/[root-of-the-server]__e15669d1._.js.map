{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/libs/actions/session.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport {cookies} from \"next/headers\";\r\nimport {decodeJwt} from \"jose\";\r\nimport {redirect} from \"next/navigation\";\r\n\r\nexport type JwtTokenData = {\r\n    iat: number,\r\n    exp: number,\r\n    roles: string[],\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n};\r\n\r\nexport type UserData = {\r\n    firstname: string,\r\n    lastname: string,\r\n    username: string\r\n};\r\n\r\nexport async function createSession(jwtToken: string): Promise<void> {\r\n    const tokenData: JwtTokenData = decodeJwt(jwtToken);\r\n    const cookieManager = await cookies();\r\n\r\n    if (process.env.NEXT_PUBLIC_SECURE_COOKIE === \"secure\") {\r\n        cookieManager.set(\"auth-token\", jwtToken, {\r\n            httpOnly: true,\r\n            secure: true,\r\n            expires: new Date(tokenData.exp * 1000),\r\n            path: \"/\"\r\n        })\r\n    } else {\r\n        cookieManager.set(\"auth-token\", jwtToken, {\r\n            httpOnly: true,\r\n            expires: new Date(tokenData.exp * 1000),\r\n            path: \"/\"\r\n        })\r\n    }\r\n}\r\n\r\nexport async function destroySession(): Promise<void> {\r\n    const cookieManager = await cookies();\r\n    cookieManager.delete(\"auth-token\");\r\n    for (const cookie of cookieManager.getAll()) {\r\n        cookieManager.delete(cookie.name)\r\n    }\r\n    redirect(\"/\")\r\n}\r\n\r\nexport async function getAuthenticationToken(): Promise<string | undefined> {\r\n    const cookieManager = await cookies();\r\n    return cookieManager.get(\"auth-token\")?.value;\r\n}\r\n\r\nexport async function getUserData(): Promise<UserData | undefined> {\r\n    const cookieManager = await cookies();\r\n    const cookie = cookieManager.get(\"auth-token\");\r\n\r\n    if (cookie?.value) {\r\n        const details: JwtTokenData = decodeJwt(cookie.value);\r\n        return {\r\n            firstname: details.firstname,\r\n            lastname: details.lastname,\r\n            username: details.username,\r\n        };\r\n    } else {\r\n        return undefined;\r\n    }\r\n}"],"names":[],"mappings":";;;;;;AAEA;AAAA;AACA;AACA;AAAA;AAJA;;;;AAqBO,eAAe,cAAc,QAAgB;IAChD,MAAM,YAA0B,CAAA,GAAA,oKAAA,CAAA,YAAS,AAAD,EAAE;IAC1C,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAElC,uCAAwD;;IAOxD,OAAO;QACH,cAAc,GAAG,CAAC,cAAc,UAAU;YACtC,UAAU;YACV,SAAS,IAAI,KAAK,UAAU,GAAG,GAAG;YAClC,MAAM;QACV;IACJ;AACJ;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,cAAc,MAAM,CAAC;IACrB,KAAK,MAAM,UAAU,cAAc,MAAM,GAAI;QACzC,cAAc,MAAM,CAAC,OAAO,IAAI;IACpC;IACA,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,OAAO,cAAc,GAAG,CAAC,eAAe;AAC5C;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,MAAM,SAAS,cAAc,GAAG,CAAC;IAEjC,IAAI,QAAQ,OAAO;QACf,MAAM,UAAwB,CAAA,GAAA,oKAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;QACpD,OAAO;YACH,WAAW,QAAQ,SAAS;YAC5B,UAAU,QAAQ,QAAQ;YAC1B,UAAU,QAAQ,QAAQ;QAC9B;IACJ,OAAO;QACH,OAAO;IACX;AACJ"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/libs/actions/authentication.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport {LoginData} from \"@/libs/schemas/login\";\r\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport {createSession, destroySession, getAuthenticationToken, JwtTokenData} from \"@/libs/actions/session\";\r\nimport {decodeJwt} from \"jose\";\r\nimport {AccountData} from \"@/libs/schemas/account\";\r\nimport {PasswordData} from \"@/libs/schemas/password\";\r\nimport {RegisterData} from \"@/libs/schemas/register\";\r\n\r\nconst BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;\r\n\r\nexport type AuthenticationResponse = {\r\n    code: string,\r\n    message: string\r\n}\r\n\r\nexport async function login(loginData: LoginData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const loginResponse =  await axios.post(`${BASE_URL}/login`, loginData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (loginResponse.status === 200) {\r\n            await createSession(loginResponse.data.token);\r\n            return {\r\n                code: \"LOGIN_SUCCEED\",\r\n                message: \"Connexion établie !\"\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: loginResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: \"Identifiants invalides.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function register(registerData: RegisterData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const registerResponse =  await axios.post(`${BASE_URL}/register`, registerData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (registerResponse.status === 200) {\r\n            return {\r\n                code: \"REGISTER_SUCCEED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REGISTER_FAILED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function refresh(): Promise<AuthenticationResponse> {\r\n    try {\r\n        const refreshResponse =  await axios.get(`${BASE_URL}/refresh`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (refreshResponse.status === 200) {\r\n            await createSession(refreshResponse.data.token);\r\n            const tokenData: JwtTokenData = decodeJwt(refreshResponse.data.token)\r\n            return {\r\n                code: \"REFRESH_SUCCEED\",\r\n                message: `Session actualisée pour ${tokenData.username} !`\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: refreshResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function logout(): Promise<void> {\r\n    await destroySession();\r\n}\r\n\r\nexport async function check(): Promise<boolean> {\r\n    const authSession = await getAuthenticationToken();\r\n    return authSession !== undefined;\r\n}\r\n\r\nexport async function password(passwordData: PasswordData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const passwordResponse =  await axios.post(`${BASE_URL}/change-password`, passwordData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (passwordResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function account(accountData: AccountData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const accountResponse =  await axios.post(`${BASE_URL}/edit-account`, accountData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (accountResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse, NextRequest } from \"next/server\";\r\nimport {check} from \"@/libs/actions/authentication\";\r\n\r\nexport async function middleware(req : NextRequest) {\r\n\r\n    if (req.nextUrl.pathname != '/') {\r\n        if (req.nextUrl.pathname == \"/login\" || req.nextUrl.pathname == \"/register\" || req.nextUrl.pathname == \"/forgot-password\" || req.nextUrl.pathname == \"/reset-password\" || req.nextUrl.pathname == \"/leaderboard\") {\r\n            if (await check()) {\r\n                return NextResponse.redirect(new URL(\"/dashboard\", req.nextUrl.origin));\r\n            }\r\n        } else {\r\n            if (! await check()) {\r\n                return NextResponse.redirect(new URL(\"/login?redirect=not-logged-in\", req.nextUrl.origin));\r\n            }\r\n        }\r\n    }\r\n\r\n    return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n    matcher: [\r\n        \"/((?!api|_next/static|_next/image|images|favicon.ico|sitemap.xml|robots.txt).*)\",\r\n    ],\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe,WAAW,GAAiB;IAE9C,IAAI,IAAI,OAAO,CAAC,QAAQ,IAAI,KAAK;QAC7B,IAAI,IAAI,OAAO,CAAC,QAAQ,IAAI,YAAY,IAAI,OAAO,CAAC,QAAQ,IAAI,eAAe,IAAI,OAAO,CAAC,QAAQ,IAAI,sBAAsB,IAAI,OAAO,CAAC,QAAQ,IAAI,qBAAqB,IAAI,OAAO,CAAC,QAAQ,IAAI,gBAAgB;YAC9M,IAAI,MAAM,CAAA,GAAA,yIAAA,CAAA,QAAK,AAAD,KAAK;gBACf,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,OAAO,CAAC,MAAM;YACzE;QACJ,OAAO;YACH,IAAI,CAAE,MAAM,CAAA,GAAA,yIAAA,CAAA,QAAK,AAAD,KAAK;gBACjB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iCAAiC,IAAI,OAAO,CAAC,MAAM;YAC5F;QACJ;IACJ;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QACL;KACH;AACL"}}]
}