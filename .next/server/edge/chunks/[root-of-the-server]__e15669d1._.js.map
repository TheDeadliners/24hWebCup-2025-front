{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/libs/actions/session.ts"],"sourcesContent":["\"use server\";\n\nimport {cookies} from \"next/headers\";\nimport {decodeJwt} from \"jose\";\nimport {redirect} from \"next/navigation\";\n\nexport type JwtTokenData = {\n    iat: number,\n    exp: number,\n    roles: string[],\n    username: string,\n    firstname: string,\n    lastname: string,\n    created_at: string\n};\n\nexport type UserData = {\n    firstname: string,\n    lastname: string,\n    username: string,\n    created_at: string\n};\n\nexport async function createSession(jwtToken: string): Promise<void> {\n    const tokenData: JwtTokenData = decodeJwt(jwtToken);\n    const cookieManager = await cookies();\n\n    if (process.env.NEXT_PUBLIC_SECURE_COOKIE === \"secure\") {\n        cookieManager.set(\"auth-token\", jwtToken, {\n            httpOnly: true,\n            secure: true,\n            expires: new Date(tokenData.exp * 1000),\n            path: \"/\"\n        })\n    } else {\n        cookieManager.set(\"auth-token\", jwtToken, {\n            httpOnly: true,\n            expires: new Date(tokenData.exp * 1000),\n            path: \"/\"\n        })\n    }\n}\n\nexport async function destroySession(): Promise<void> {\n    const cookieManager = await cookies();\n    cookieManager.delete(\"auth-token\");\n    for (const cookie of cookieManager.getAll()) {\n        cookieManager.delete(cookie.name)\n    }\n    redirect(\"/\")\n}\n\nexport async function getAuthenticationToken(): Promise<string | undefined> {\n    const cookieManager = await cookies();\n    return cookieManager.get(\"auth-token\")?.value;\n}\n\nexport async function getUserData(): Promise<UserData | undefined> {\n    const cookieManager = await cookies();\n    const cookie = cookieManager.get(\"auth-token\");\n\n    if (cookie?.value) {\n        const details: JwtTokenData = decodeJwt(cookie.value);\n        return {\n            firstname: details.firstname,\n            lastname: details.lastname,\n            username: details.username,\n            created_at: details.created_at,\n        };\n    } else {\n        return undefined;\n    }\n}"],"names":[],"mappings":";;;;;;AAEA;AAAA;AACA;AACA;AAAA;AAJA;;;;AAuBO,eAAe,cAAc,QAAgB;IAChD,MAAM,YAA0B,CAAA,GAAA,oKAAA,CAAA,YAAS,AAAD,EAAE;IAC1C,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAElC,uCAAwD;;IAOxD,OAAO;QACH,cAAc,GAAG,CAAC,cAAc,UAAU;YACtC,UAAU;YACV,SAAS,IAAI,KAAK,UAAU,GAAG,GAAG;YAClC,MAAM;QACV;IACJ;AACJ;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,cAAc,MAAM,CAAC;IACrB,KAAK,MAAM,UAAU,cAAc,MAAM,GAAI;QACzC,cAAc,MAAM,CAAC,OAAO,IAAI;IACpC;IACA,CAAA,GAAA,+KAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,OAAO,cAAc,GAAG,CAAC,eAAe;AAC5C;AAEO,eAAe;IAClB,MAAM,gBAAgB,MAAM,CAAA,GAAA,2KAAA,CAAA,UAAO,AAAD;IAClC,MAAM,SAAS,cAAc,GAAG,CAAC;IAEjC,IAAI,QAAQ,OAAO;QACf,MAAM,UAAwB,CAAA,GAAA,oKAAA,CAAA,YAAS,AAAD,EAAE,OAAO,KAAK;QACpD,OAAO;YACH,WAAW,QAAQ,SAAS;YAC5B,UAAU,QAAQ,QAAQ;YAC1B,UAAU,QAAQ,QAAQ;YAC1B,YAAY,QAAQ,UAAU;QAClC;IACJ,OAAO;QACH,OAAO;IACX;AACJ"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/libs/actions/authentication.ts"],"sourcesContent":["\"use server\";\n\nimport {LoginData} from \"@/libs/schemas/login\";\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\nimport {createSession, destroySession, getAuthenticationToken, JwtTokenData} from \"@/libs/actions/session\";\nimport {decodeJwt} from \"jose\";\nimport {AccountData} from \"@/libs/schemas/account\";\nimport {PasswordData} from \"@/libs/schemas/password\";\nimport {RegisterData} from \"@/libs/schemas/register\";\nimport {ForgotData} from \"@/libs/schemas/forgot\";\nimport {ResetData} from \"@/libs/schemas/reset\";\n\nconst BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;\n\nexport type AuthenticationResponse = {\n    code: string,\n    message: string\n}\n\nexport async function login(loginData: LoginData): Promise<AuthenticationResponse> {\n    try {\n        const loginResponse =  await axios.post(`${BASE_URL}/login`, loginData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (loginResponse.status === 200) {\n            await createSession(loginResponse.data.token);\n            return {\n                code: \"LOGIN_SUCCEED\",\n                message: \"Connexion établie !\"\n            }\n        } else {\n            return {\n                code: \"LOGIN_FAILED\",\n                message: loginResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"LOGIN_FAILED\",\n                message: \"Identifiants invalides.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"LOGIN_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"LOGIN_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function forgot(forgotData: ForgotData): Promise<AuthenticationResponse> {\n    try {\n        const forgotResponse =  await axios.post(`${BASE_URL}/forgot-password`, forgotData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (forgotResponse.status === 200) {\n            return {\n                code: \"FORGOT_SUCCEED\",\n                message: forgotResponse.data.message\n            }\n        } else {\n            return {\n                code: \"FORGOT_FAILED\",\n                message: forgotResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"FORGOT_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"FORGOT_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function register(registerData: RegisterData): Promise<AuthenticationResponse> {\n    try {\n        const registerResponse =  await axios.post(`${BASE_URL}/register`, registerData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (registerResponse.status === 200) {\n            return {\n                code: \"REGISTER_SUCCEED\",\n                message: registerResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REGISTER_FAILED\",\n                message: registerResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REGISTER_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REGISTER_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function reset(resetData: ResetData): Promise<AuthenticationResponse> {\n    try {\n        const registerResponse =  await axios.post(`${BASE_URL}/reset-password`, resetData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        })\n\n        if (registerResponse.status === 200) {\n            return {\n                code: \"RESET_SUCCEED\",\n                message: registerResponse.data.message\n            }\n        } else {\n            return {\n                code: \"RESET_FAILED\",\n                message: registerResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"RESET_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"RESET_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function refresh(): Promise<AuthenticationResponse> {\n    try {\n        const refreshResponse =  await axios.get(`${BASE_URL}/refresh`, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (refreshResponse.status === 200) {\n            await createSession(refreshResponse.data.token);\n            const tokenData: JwtTokenData = decodeJwt(refreshResponse.data.token)\n            return {\n                code: \"REFRESH_SUCCEED\",\n                message: `Session actualisée pour ${tokenData.username} !`\n            }\n        } else {\n            return {\n                code: \"REFRESH_FAILED\",\n                message: refreshResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REFRESH_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REFRESH_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REFRESH_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function logout(): Promise<void> {\n    await destroySession();\n}\n\nexport async function check(): Promise<boolean> {\n    const authSession = await getAuthenticationToken();\n    return authSession !== undefined;\n}\n\nexport async function password(passwordData: PasswordData): Promise<AuthenticationResponse> {\n    try {\n        const passwordResponse =  await axios.post(`${BASE_URL}/change-password`, passwordData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (passwordResponse.status === 200) {\n            return {\n                code: \"REQUEST_SUCCEED\",\n                message: passwordResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: passwordResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}\n\nexport async function account(accountData: AccountData): Promise<AuthenticationResponse> {\n    try {\n        const accountResponse =  await axios.post(`${BASE_URL}/edit-account`, accountData, {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\n            }\n        })\n\n        if (accountResponse.status === 200) {\n            return {\n                code: \"REQUEST_SUCCEED\",\n                message: accountResponse.data.message\n            }\n        } else {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: accountResponse.data.message\n            }\n        }\n    } catch (error) {\n        const axiosError = error as AxiosError;\n        if (axiosError.response?.status === 401) {\n            return {\n                code: \"REQUEST_FAILED\",\n                message: \"Vous n'êtes pas connecté.\",\n            }\n        } else if (axiosError.code == \"ECONNREFUSED\") {\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : L'API est injoignable.`\n            }\n        } else {\n            const responseError = axiosError.response as AxiosResponse;\n            return {\n                code: \"REQUEST_ERROR\",\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\n            }\n        }\n    }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextResponse, NextRequest } from \"next/server\";\nimport {check} from \"@/libs/actions/authentication\";\n\nexport async function middleware(req : NextRequest) {\n\n    if (req.nextUrl.pathname !== '/' && req.nextUrl.pathname !== '/leaderboard' && req.nextUrl.pathname !== '/this-is-the-end') {\n        if (req.nextUrl.pathname == \"/login\" || req.nextUrl.pathname == \"/register\" || req.nextUrl.pathname == \"/forgot-password\" || req.nextUrl.pathname == \"/reset-password\") {\n            if (await check()) {\n                return NextResponse.redirect(new URL(\"/dashboard\", req.nextUrl.origin));\n            }\n        } else {\n            if (! await check()) {\n                return NextResponse.redirect(new URL(\"/login?redirect=not-logged-in\", req.nextUrl.origin));\n            }\n        }\n    }\n\n    return NextResponse.next();\n}\n\nexport const config = {\n    matcher: [\n        \"/((?!api|_next/static|_next/image|images|favicon.ico|sitemap.xml|robots.txt).*)\",\n    ],\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe,WAAW,GAAiB;IAE9C,IAAI,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,IAAI,OAAO,CAAC,QAAQ,KAAK,kBAAkB,IAAI,OAAO,CAAC,QAAQ,KAAK,oBAAoB;QACxH,IAAI,IAAI,OAAO,CAAC,QAAQ,IAAI,YAAY,IAAI,OAAO,CAAC,QAAQ,IAAI,eAAe,IAAI,OAAO,CAAC,QAAQ,IAAI,sBAAsB,IAAI,OAAO,CAAC,QAAQ,IAAI,mBAAmB;YACpK,IAAI,MAAM,CAAA,GAAA,yIAAA,CAAA,QAAK,AAAD,KAAK;gBACf,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,OAAO,CAAC,MAAM;YACzE;QACJ,OAAO;YACH,IAAI,CAAE,MAAM,CAAA,GAAA,yIAAA,CAAA,QAAK,AAAD,KAAK;gBACjB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,iCAAiC,IAAI,OAAO,CAAC,MAAM;YAC5F;QACJ;IACJ;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC5B;AAEO,MAAM,SAAS;IAClB,SAAS;QACL;KACH;AACL"}}]
}