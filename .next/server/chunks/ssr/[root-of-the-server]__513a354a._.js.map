{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/libs/actions/authentication.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport {LoginData} from \"@/libs/schemas/login\";\r\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport {createSession, destroySession, getAuthenticationToken, JwtTokenData} from \"@/libs/actions/session\";\r\nimport {decodeJwt} from \"jose\";\r\nimport {AccountData} from \"@/libs/schemas/account\";\r\nimport {PasswordData} from \"@/libs/schemas/password\";\r\nimport {RegisterData} from \"@/libs/schemas/register\";\r\n\r\nconst BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;\r\n\r\nexport type AuthenticationResponse = {\r\n    code: string,\r\n    message: string\r\n}\r\n\r\nexport async function login(loginData: LoginData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const loginResponse =  await axios.post(`${BASE_URL}/login`, loginData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (loginResponse.status === 200) {\r\n            await createSession(loginResponse.data.token);\r\n            return {\r\n                code: \"LOGIN_SUCCEED\",\r\n                message: \"Connexion établie !\"\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: loginResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: \"Identifiants invalides.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function register(registerData: RegisterData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const registerResponse =  await axios.post(`${BASE_URL}/register`, registerData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (registerResponse.status === 200) {\r\n            return {\r\n                code: \"REGISTER_SUCCEED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REGISTER_FAILED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function refresh(): Promise<AuthenticationResponse> {\r\n    try {\r\n        const refreshResponse =  await axios.get(`${BASE_URL}/refresh`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (refreshResponse.status === 200) {\r\n            await createSession(refreshResponse.data.token);\r\n            const tokenData: JwtTokenData = decodeJwt(refreshResponse.data.token)\r\n            return {\r\n                code: \"REFRESH_SUCCEED\",\r\n                message: `Session actualisée pour ${tokenData.username} !`\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: refreshResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function logout(): Promise<void> {\r\n    await destroySession();\r\n}\r\n\r\nexport async function check(): Promise<boolean> {\r\n    const authSession = await getAuthenticationToken();\r\n    return authSession !== undefined;\r\n}\r\n\r\nexport async function password(passwordData: PasswordData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const passwordResponse =  await axios.post(`${BASE_URL}/change-password`, passwordData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (passwordResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function account(accountData: AccountData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const accountResponse =  await axios.post(`${BASE_URL}/edit-account`, accountData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (accountResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;;;;IA8IsB,SAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/components/controls/backoffice/logout-modal.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {useState} from \"react\";\r\nimport {logout} from \"@/libs/actions/authentication\";\r\nimport {DoorIcon, SpinnerIcon} from \"@phosphor-icons/react\";\r\nimport {UserData} from \"@/libs/actions/session\";\r\n\r\nexport default function LogoutModal({userData}: {userData: UserData}) {\r\n    const [isModalOpenState, setIsModalOpenState] = useState<boolean>(false);\r\n    const [isLoggingOutState, setIsLoggingOutState] = useState<boolean>(false);\r\n\r\n    const openLogoutModal = () => {\r\n        setIsModalOpenState(true);\r\n    }\r\n\r\n    const closeLogoutModal = () => {\r\n        setIsModalOpenState(false);\r\n    }\r\n\r\n    const logoutFromApplication = async () => {\r\n        setIsLoggingOutState(true);\r\n        await logout();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <button type=\"button\" className=\"btn btn-neutral\" onClick={openLogoutModal}>\r\n                <DoorIcon weight=\"bold\" className=\"h-6 w-6\" /> <span className=\"hidden md:flex\">Déconnexion</span>\r\n            </button>\r\n            <dialog className={`modal ${isModalOpenState ? \"modal-open\" : null}`}>\r\n                <div className=\"modal-box text-center\">\r\n                    <h3 className=\"font-bold text-lg\">Déconnexion de l&apos;application</h3>\r\n                    <p className=\"py-4\">Voulez-vous vous déconnecter ?</p>\r\n                    <div>\r\n                        <div className=\"badge badge-success\">{userData.username}</div>\r\n                    </div>\r\n                    <div className=\"modal-action justify-between\">\r\n                        <button type=\"button\" className=\"btn btn-neutral\" onClick={closeLogoutModal}>Annuler</button>\r\n                        <button type=\"button\" className=\"btn btn-error\" onClick={logoutFromApplication} disabled={isLoggingOutState}>\r\n                            {!isLoggingOutState ? \"Confirmer\" : <>Déconnexion <SpinnerIcon className=\"icon animate-spin\"/></>}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </dialog>\r\n        </>\r\n    );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAAA;AAJA;;;;;AAOe,SAAS,YAAY,EAAC,QAAQ,EAAuB;IAChE,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAClE,MAAM,CAAC,mBAAmB,qBAAqB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IAEpE,MAAM,kBAAkB;QACpB,oBAAoB;IACxB;IAEA,MAAM,mBAAmB;QACrB,oBAAoB;IACxB;IAEA,MAAM,wBAAwB;QAC1B,qBAAqB;QACrB,MAAM,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD;IACf;IAEA,qBACI;;0BACI,8OAAC;gBAAO,MAAK;gBAAS,WAAU;gBAAkB,SAAS;;kCACvD,8OAAC,yKAAA,CAAA,WAAQ;wBAAC,QAAO;wBAAO,WAAU;;;;;;oBAAY;kCAAC,8OAAC;wBAAK,WAAU;kCAAiB;;;;;;;;;;;;0BAEpF,8OAAC;gBAAO,WAAW,CAAC,MAAM,EAAE,mBAAmB,eAAe,MAAM;0BAChE,cAAA,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAG,WAAU;sCAAoB;;;;;;sCAClC,8OAAC;4BAAE,WAAU;sCAAO;;;;;;sCACpB,8OAAC;sCACG,cAAA,8OAAC;gCAAI,WAAU;0CAAuB,SAAS,QAAQ;;;;;;;;;;;sCAE3D,8OAAC;4BAAI,WAAU;;8CACX,8OAAC;oCAAO,MAAK;oCAAS,WAAU;oCAAkB,SAAS;8CAAkB;;;;;;8CAC7E,8OAAC;oCAAO,MAAK;oCAAS,WAAU;oCAAgB,SAAS;oCAAuB,UAAU;8CACrF,CAAC,oBAAoB,4BAAc;;4CAAE;0DAAY,8OAAC,4KAAA,CAAA,cAAW;gDAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOrG","debugId":null}}]
}