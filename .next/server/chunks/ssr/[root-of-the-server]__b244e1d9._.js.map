{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/libs/schemas/login.ts"],"sourcesContent":["import {z} from \"zod\";\r\n\r\nexport type LoginData = z.infer<typeof LoginSchema>;\r\n\r\nexport const LoginSchema = z.object({\r\n    email: z.string({message: \"Une adresse e-mail est requise.\"}).nonempty({message: \"Une adresse est requise.\"}).trim(),\r\n    password: z.string({message: \"Un mot de passe est requis.\"}).nonempty({message: \"Un mot de passe est requis.\"}).trim(),\r\n})"],"names":[],"mappings":";;;AAAA;;AAIO,MAAM,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,SAAS;IAAiC,GAAG,QAAQ,CAAC;QAAC,SAAS;IAA0B,GAAG,IAAI;IAClH,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAC,SAAS;IAA6B,GAAG,QAAQ,CAAC;QAAC,SAAS;IAA6B,GAAG,IAAI;AACxH","debugId":null}},
    {"offset": {"line": 30, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/libs/actions/authentication.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport {LoginData} from \"@/libs/schemas/login\";\r\nimport axios, {AxiosError, AxiosResponse} from \"axios\";\r\nimport {createSession, destroySession, getAuthenticationToken, JwtTokenData} from \"@/libs/actions/session\";\r\nimport {decodeJwt} from \"jose\";\r\nimport {AccountData} from \"@/libs/schemas/account\";\r\nimport {PasswordData} from \"@/libs/schemas/password\";\r\nimport {RegisterData} from \"@/libs/schemas/register\";\r\n\r\nconst BASE_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;\r\n\r\nexport type AuthenticationResponse = {\r\n    code: string,\r\n    message: string\r\n}\r\n\r\nexport async function login(loginData: LoginData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const loginResponse =  await axios.post(`${BASE_URL}/login`, loginData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (loginResponse.status === 200) {\r\n            await createSession(loginResponse.data.token);\r\n            return {\r\n                code: \"LOGIN_SUCCEED\",\r\n                message: \"Connexion établie !\"\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: loginResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"LOGIN_FAILED\",\r\n                message: \"Identifiants invalides.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"LOGIN_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function register(registerData: RegisterData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const registerResponse =  await axios.post(`${BASE_URL}/register`, registerData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n\r\n        if (registerResponse.status === 200) {\r\n            return {\r\n                code: \"REGISTER_SUCCEED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REGISTER_FAILED\",\r\n                message: registerResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REGISTER_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function refresh(): Promise<AuthenticationResponse> {\r\n    try {\r\n        const refreshResponse =  await axios.get(`${BASE_URL}/refresh`, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (refreshResponse.status === 200) {\r\n            await createSession(refreshResponse.data.token);\r\n            const tokenData: JwtTokenData = decodeJwt(refreshResponse.data.token)\r\n            return {\r\n                code: \"REFRESH_SUCCEED\",\r\n                message: `Session actualisée pour ${tokenData.username} !`\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: refreshResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REFRESH_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REFRESH_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function logout(): Promise<void> {\r\n    await destroySession();\r\n}\r\n\r\nexport async function check(): Promise<boolean> {\r\n    const authSession = await getAuthenticationToken();\r\n    return authSession !== undefined;\r\n}\r\n\r\nexport async function password(passwordData: PasswordData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const passwordResponse =  await axios.post(`${BASE_URL}/change-password`, passwordData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (passwordResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: passwordResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function account(accountData: AccountData): Promise<AuthenticationResponse> {\r\n    try {\r\n        const accountResponse =  await axios.post(`${BASE_URL}/edit-account`, accountData, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Authorization\": `Bearer ${await getAuthenticationToken()}`\r\n            }\r\n        })\r\n\r\n        if (accountResponse.status === 200) {\r\n            return {\r\n                code: \"REQUEST_SUCCEED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        } else {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: accountResponse.data.message\r\n            }\r\n        }\r\n    } catch (error) {\r\n        const axiosError = error as AxiosError;\r\n        if (axiosError.response?.status === 401) {\r\n            return {\r\n                code: \"REQUEST_FAILED\",\r\n                message: \"Vous n'êtes pas connecté.\",\r\n            }\r\n        } else if (axiosError.code == \"ECONNREFUSED\") {\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : L'API est injoignable.`\r\n            }\r\n        } else {\r\n            const responseError = axiosError.response as AxiosResponse;\r\n            return {\r\n                code: \"REQUEST_ERROR\",\r\n                message: `Erreur : ${responseError.data?.message ?? axiosError.code}`\r\n            }\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;;;;IAiBsB,QAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/components/controls/SessionExpiredNotice.tsx"],"sourcesContent":["'use client';\r\nimport { useSearchParams } from 'next/navigation';\r\n\r\nexport default function SessionExpiredNotice() {\r\n    const params = useSearchParams();\r\n    const reason = params.get('redirect');\r\n\r\n    if (reason === 'not-logged-in') {\r\n        return (\r\n            <div className=\"fieldset mt-2 p-5\">\r\n                <div className=\"alert alert-error\">\r\n                    Votre session a expiré.\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}"],"names":[],"mappings":";;;;AACA;AADA;;;AAGe,SAAS;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,kBAAe,AAAD;IAC7B,MAAM,SAAS,OAAO,GAAG,CAAC;IAE1B,IAAI,WAAW,iBAAiB;QAC5B,qBACI,8OAAC;YAAI,WAAU;sBACX,cAAA,8OAAC;gBAAI,WAAU;0BAAoB;;;;;;;;;;;IAK/C;IAEA,OAAO;AACX","debugId":null}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/babas/Documents/Projets/24hWebCup-2025-front/components/forms/login-form.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, {Suspense, useState} from \"react\";\r\nimport {LoginData, LoginSchema} from \"@/libs/schemas/login\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {zodResolver} from \"@hookform/resolvers/zod\";\r\nimport {EyeIcon, EyeSlashIcon, SpinnerIcon, WarningIcon} from \"@phosphor-icons/react\";\r\nimport {login} from \"@/libs/actions/authentication\";\r\nimport {redirect} from \"next/navigation\";\r\nimport toast from \"react-hot-toast\";\r\nimport SessionExpiredNotice from \"@/components/controls/SessionExpiredNotice\";\r\n\r\nexport default function LoginForm() {\r\n    const [isPasswordClearText, setPasswordClearText] = useState<boolean>(false);\r\n    const [submitState, setSubmitState] = useState<boolean>(true);\r\n\r\n    const toggleClearPassword = () => {\r\n        setPasswordClearText(!isPasswordClearText);\r\n    }\r\n\r\n    const loginForm = useForm<LoginData>({\r\n        resolver: zodResolver(LoginSchema),\r\n        defaultValues: {\r\n            email: \"\",\r\n            password: \"\",\r\n        }\r\n    });\r\n\r\n    const onSubmit = async (loginData: LoginData): Promise<void> => {\r\n        setSubmitState(false);\r\n        const response = await login(loginData);\r\n        if (response.code == \"LOGIN_SUCCEED\") {\r\n            toast.success(response.message);\r\n            redirect(\"/dashboard\");\r\n        } else {\r\n            toast.error(response.message);\r\n        }\r\n        setSubmitState(true);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={loginForm.handleSubmit(onSubmit)} className=\"card\">\r\n            <section className=\"card-body items-center\">\r\n                <h2 className=\"card-title\">Connexion</h2>\r\n                <div className=\"w-full\">\r\n                    <Controller control={loginForm.control} name=\"email\" render={({field}) => (\r\n                        <fieldset className=\"fieldset mb-2\">\r\n                            <legend className=\"fieldset-legend\">Identifiant</legend>\r\n                            <input type=\"text\" className=\"input\" {...field}/>\r\n                            {loginForm.formState.errors.email && (\r\n                                <div role=\"alert\" className=\"form-error\">\r\n                                    <WarningIcon className=\"icon\"/>\r\n                                    <div>{loginForm.formState.errors.email.message}</div>\r\n                                </div>\r\n                            )}\r\n                        </fieldset>\r\n                    )}/>\r\n                    <Controller control={loginForm.control} name=\"password\" render={({field}) => (\r\n                        <fieldset className=\"fieldset mb-2\">\r\n                            <legend className=\"fieldset-legend\">Mot de passe</legend>\r\n                            <div className=\"flex gap-2\">\r\n                                <input type={isPasswordClearText ? \"text\" : \"password\"}\r\n                                       className=\"input\" {...field}/>\r\n                                <button className=\"btn btn-primary\" type=\"button\" onClick={toggleClearPassword}>\r\n                                    {isPasswordClearText ? <EyeIcon className=\"icon\"/> : <EyeSlashIcon className=\"icon\"/>}\r\n                                </button>\r\n                            </div>\r\n                            {loginForm.formState.errors.password && (\r\n                                <div role=\"alert\" className=\"form-error\">\r\n                                    <WarningIcon className=\"icon\"/>\r\n                                    <div>{loginForm.formState.errors.password.message}</div>\r\n                                </div>\r\n                            )}\r\n                        </fieldset>\r\n                    )}/>\r\n                </div>\r\n                <div className=\"card-actions justify-end\">\r\n                    <fieldset className=\"fieldset\">\r\n                        <div className=\"mx-auto\">\r\n                            <button className=\"btn btn-primary\" type={submitState ? \"submit\" : \"button\"} disabled={!submitState}>\r\n                                {submitState ? \"Connexion\" : <><SpinnerIcon weight=\"bold\" className=\"icon animate-spin\"/></>}\r\n                            </button>\r\n                        </div>\r\n                    </fieldset>\r\n                </div>\r\n            </section>\r\n\r\n            <Suspense fallback={null}>\r\n                <SessionExpiredNotice />\r\n            </Suspense>\r\n        </form>\r\n    );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}